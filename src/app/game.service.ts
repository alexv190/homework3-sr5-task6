import { Injectable } from '@angular/core';

export class PlaterMoveResult {
  constructor(
    public finished: boolean,
    public message: string,
    public cows: number,
    public bulls: number
  ) {}
}

@Injectable()
export class GameService {
  private goal: string;
  private cowsMaxCorrect:number;
  private bullsMaxCorrect:number;

  constructor() {}

  startGame(): PlaterMoveResult {
    this.planNumber();
    this.bullsMaxCorrect = 0;
    this.cowsMaxCorrect = 0;
    return new PlaterMoveResult(true, `–ú–∞—à–∏–Ω–∞ —É–∂–µ –∑–∞–≥–∞–¥–∞–ª–∞ —á–∏—Å–ª–æ! –î–µ—Ä–∑–∞–π—Ç–µ!`, 0, 0);
  }

  playerMove(value: string): PlaterMoveResult {
    const strNum = value.toString().replace(/[^0-9]/g, '');
    return this.checkMove(strNum);
  }

  private checkMove(guessValue: string): PlaterMoveResult {
    if (guessValue.length != 4) {
      return new PlaterMoveResult(false, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ', 0, 0);
    }
    if (!this.checkDigitDoNotRepeat(guessValue)) {
      return new PlaterMoveResult(false, '–¶–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è', 0, 0);
    }
    let cows = 0;
    let bulls = 0;
    const goalChars = this.goal.split('');
    const valueChars = guessValue.split('');
    for (let i=0; i < 4; i++) {
      if (goalChars[i] == valueChars[i]) {
        bulls++;
      }
      if (guessValue.indexOf(goalChars[i]) != -1) {//–µ—Å–ª–∏ —É–≥–∞–¥–∞–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª –∏–∑ —Ü–µ–ª–∏
        cows++;
      }
    }
    let message = guessValue + ': ';
    cows -= bulls;//–∫–æ–ª-–≤–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–æ–≤
    if (cows - this.cowsMaxCorrect == 2) {
      message += '–ù–µ–ø–ª–æ—Ö–æ! '
    }
    if (cows - this.cowsMaxCorrect == 3 || bulls - this.bullsMaxCorrect == 2) {
      message += '–û—Ç–ª–∏—á–Ω—ã–π —Ö–æ–¥! '
    }
    if (cows - this.cowsMaxCorrect == 4) {
      message += '–ê–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞! '
    }
    if (bulls == 4) {
      message += '–ë–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–∞—è –ø–æ–±–µ–¥–∞! '
    }
    if (bulls - this.bullsMaxCorrect == 4) {
      message += '–ü–æ–±–µ–¥–∞ –≤ –æ–¥–∏–Ω —Ö–æ–¥! '
    }
    message += '–í—ã —É–≥–∞–¥–∞–ª–∏ ';
    for (let i=0; i < bulls; i++) {
      message += 'üêÇ';
    }
    if (bulls > 0 && cows > 0) {
      message += ' –∏ ';
    }
    for (let i=0; i < cows; i++) {
      message += 'üêÆ';
    }
    this.cowsMaxCorrect = Math.max(this.cowsMaxCorrect, cows);
    this.bullsMaxCorrect = Math.max(this.bullsMaxCorrect, bulls);
    const finished = bulls == 4;
    return  new PlaterMoveResult(finished, message, cows, bulls);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç 4-—Ö —Å–∏–º–≤–æ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–æ—Ç–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
   * @param value
   */
  private checkDigitDoNotRepeat(value: string): boolean {
    var wordSet = new Set(value);
    var lenWord = value.length;
    var lenWordSet = wordSet.size;

    return lenWord === lenWordSet;
  }

  private planNumber() {
    let num: string;
    while (true) {
      num = this.randomInteger(1000, 9999).toString();
      if (this.checkDigitDoNotRepeat(num)) {
        break;
      }
    }
    this.goal = num;
  }

  private randomInteger(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
}
